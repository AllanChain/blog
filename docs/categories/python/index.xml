<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on AC&#39;s Blog</title>
    <link>https://allanchain.github.io/blog/categories/python/</link>
    <description>Recent content in Python on AC&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 03 Oct 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://allanchain.github.io/blog/categories/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>我踏马为什么要选 Flask？</title>
      <link>https://allanchain.github.io/blog/post/2019/10/03/%E6%88%91%E8%B8%8F%E9%A9%AC%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E9%80%89-flask/</link>
      <pubDate>Thu, 03 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://allanchain.github.io/blog/post/2019/10/03/%E6%88%91%E8%B8%8F%E9%A9%AC%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E9%80%89-flask/</guid>
      <description>注意，这里不是说 Flask 有多好，而是。。用 Flask 用到怀疑人生！ 不错，我又开始后悔了 😳 ： Jinja2, inspired by django WTForm, looks like django Flask-SQLAlchemy, even more like django Tons of extensions but many are not in active development. Lack of documentations, and existing documentation is not friendly</description>
    </item>
    
    <item>
      <title>服务器早期的盲目工作</title>
      <link>https://allanchain.github.io/blog/post/2019/09/23/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%A9%E6%9C%9F%E7%9A%84%E7%9B%B2%E7%9B%AE%E5%B7%A5%E4%BD%9C/</link>
      <pubDate>Mon, 23 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://allanchain.github.io/blog/post/2019/09/23/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%A9%E6%9C%9F%E7%9A%84%E7%9B%B2%E7%9B%AE%E5%B7%A5%E4%BD%9C/</guid>
      <description>打日志、测试与持续集成 我在接了写操作MySQL的四个函数的任务后，发现有错误需要记录，就设计了日志部分，也就是初始化logging。 在写完数</description>
    </item>
    
    <item>
      <title>无法运行一些老旧程序</title>
      <link>https://allanchain.github.io/blog/post/2019/07/15/%E6%97%A0%E6%B3%95%E8%BF%90%E8%A1%8C%E4%B8%80%E4%BA%9B%E8%80%81%E6%97%A7%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Mon, 15 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://allanchain.github.io/blog/post/2019/07/15/%E6%97%A0%E6%B3%95%E8%BF%90%E8%A1%8C%E4%B8%80%E4%BA%9B%E8%80%81%E6%97%A7%E7%A8%8B%E5%BA%8F/</guid>
      <description>方案：右键&amp;gt;属性&amp;gt;以兼容模式运行 优酷.kux转.mp4 优酷安装文件夹内有ffmpeg.exe，按照ffmpeg用法重新封装成mp</description>
    </item>
    
    <item>
      <title>Using Kivy and Buildozer to Build Android APK</title>
      <link>https://allanchain.github.io/blog/post/2019/07/14/using-kivy-and-buildozer-to-build-android-apk/</link>
      <pubDate>Sun, 14 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://allanchain.github.io/blog/post/2019/07/14/using-kivy-and-buildozer-to-build-android-apk/</guid>
      <description>Environment:  Ubuntu 19.04 Disco Dingo Python 3.7.3 kivy 1.10.1 buildozer 0.39   My First Android Application Ever Built Buildozer Install pip3 install buildozer  Get Kivy program Using https://github.com/kivy/kivy/tree/master/examples/demo/pictures
Configure Buildozer buildozer init vim buildozer.spec  Prepare to build As advised on Buildozer Doc, Android on Ubuntu 18.04 (64bit) should install:
sudo pip install --upgrade cython==0.28.6 sudo dpkg --add-architecture i386 sudo apt update sudo apt install build-essential ccache git libncurses5:i386 libstdc++6:i386 libgtk2.</description>
    </item>
    
    <item>
      <title>让Termux对浏览器更友好</title>
      <link>https://allanchain.github.io/blog/post/2019/07/03/%E8%AE%A9termux%E5%AF%B9%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9B%B4%E5%8F%8B%E5%A5%BD/</link>
      <pubDate>Wed, 03 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://allanchain.github.io/blog/post/2019/07/03/%E8%AE%A9termux%E5%AF%B9%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9B%B4%E5%8F%8B%E5%A5%BD/</guid>
      <description>Download xb.py 难点： 获取jupyter等应用的实时输出 import subprocess backup = subprocess.Popen( cmd.split(), shell=False, stdout=subprocess.PIPE, stderr=subprocess.STDOUT) for line in iter(backup.stdout.readline, b&#39;&#39;): line = line.rstrip().decode(&#39;utf8&#39;) 使Ctrl+C能使让应用结束 只有以shell=False启动的</description>
    </item>
    
    <item>
      <title>Pip&amp;Pypi</title>
      <link>https://allanchain.github.io/blog/post/2019/04/30/pippypi/</link>
      <pubDate>Tue, 30 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://allanchain.github.io/blog/post/2019/04/30/pippypi/</guid>
      <description>Downloading Binary Package on Windows  From StackOverflow
As the other responses pointed out, one solution is to install Visual Studio 2015. However, it takes a few GBs of disk space. One way around is to install precompiled binaries.
The webpage http://www.lfd.uci.edu/~gohlke/pythonlibs contains precompiled binaries for many Python packages.
 The pip command I actually want alias pup=&amp;quot;pip install --upgrade --no-cache -i https://pypi.tuna.tsinghua.edu.cn/simple/&amp;quot;  To install locally pip install --no-index --find-links=dest/ -r requirements.</description>
    </item>
    
    <item>
      <title>在ftp文件夹视图下实现双击打开文件</title>
      <link>https://allanchain.github.io/blog/post/2019/04/08/%E5%9C%A8ftp%E6%96%87%E4%BB%B6%E5%A4%B9%E8%A7%86%E5%9B%BE%E4%B8%8B%E5%AE%9E%E7%8E%B0%E5%8F%8C%E5%87%BB%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6/</link>
      <pubDate>Mon, 08 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://allanchain.github.io/blog/post/2019/04/08/%E5%9C%A8ftp%E6%96%87%E4%BB%B6%E5%A4%B9%E8%A7%86%E5%9B%BE%E4%B8%8B%E5%AE%9E%E7%8E%B0%E5%8F%8C%E5%87%BB%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6/</guid>
      <description>背景 在日常学习生活中，ftp文件的操作需要拖放来实现，于是产生以下问题： 拖曳操作对触摸屏并不友好，常需要通过长按后达到右键的效果再拖放。 几天</description>
    </item>
    
    <item>
      <title>Requests初探</title>
      <link>https://allanchain.github.io/blog/post/2019/02/13/requests%E5%88%9D%E6%8E%A2/</link>
      <pubDate>Wed, 13 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://allanchain.github.io/blog/post/2019/02/13/requests%E5%88%9D%E6%8E%A2/</guid>
      <description>requests 模块获取http回复十分方便，一句requests.get(url)即可搞定。 下面贴上从mliucixin.zuopinj.com/抓取刘</description>
    </item>
    
    <item>
      <title>Package Notes</title>
      <link>https://allanchain.github.io/blog/post/2019/02/10/package-notes/</link>
      <pubDate>Sun, 10 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://allanchain.github.io/blog/post/2019/02/10/package-notes/</guid>
      <description>QtDisigner Install QtDisigner is convenient, but it doesn&amp;rsquo;t come along with the none GPL version. Then it is for you.
pip install pyqt5_tools  Previewing Markdown grip is an excellent Flask app and python module to view markdown and easy to use. Just run:
pip install grip  Note that grip need Internet access because it depends on github markdown api to render.
Pip dependency tree view pip offers a freeze command to view installed packages, but not so good to see the dependencies.</description>
    </item>
    
    <item>
      <title>Module readline</title>
      <link>https://allanchain.github.io/blog/post/2019/02/08/module-readline/</link>
      <pubDate>Fri, 08 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://allanchain.github.io/blog/post/2019/02/08/module-readline/</guid>
      <description>Here is my simple script on readline. import readline import os def completer(text,state): ds=os.listdir() rs=list(filter(lambda s:s.startswith(text),ds)) if state&amp;lt;len(rs): return rs[state] return None readline.parse_and_bind(&amp;quot;tab: complete&amp;quot;) readline.set_completer(completer) input() 必须注意如果在函数中有错误的话，在你按下tab键后什么都不会发生（新手会在这里卡壳）。要</description>
    </item>
    
    <item>
      <title>Read the Character Straight</title>
      <link>https://allanchain.github.io/blog/post/2019/02/08/read-the-character-straight/</link>
      <pubDate>Fri, 08 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://allanchain.github.io/blog/post/2019/02/08/read-the-character-straight/</guid>
      <description> On Linux import os import sys import tty, termios fd = sys.stdin.fileno() old_settings = termios.tcgetattr(fd) try : tty.setraw( fd ) ch = sys.stdin.read( 1 ) finally : termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)  On Windows import msvcrt ch = msvcrt.getch()  </description>
    </item>
    
    <item>
      <title>Python the Language</title>
      <link>https://allanchain.github.io/blog/post/2018/11/04/python-the-language/</link>
      <pubDate>Sun, 04 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://allanchain.github.io/blog/post/2018/11/04/python-the-language/</guid>
      <description>Notes for python language itself.
Interesting Things About Class Let&amp;rsquo;s have a look at the following code first:
class A: def printf(*args): print(args) def printff(*args): print(args) a=A() a.printf() print (&#39;-&#39;*5,a.printf) A.printf=printff a.printf() print (&#39;-&#39;*5,a.printf) A.printf=print a.printf() print (&#39;-&#39;*5,a.printf) a.printf=printff a.printf() print (&#39;-&#39;*5,a.printf) A.printf=printff a.printf() print (&#39;-&#39;*5,a.printf) print (&#39;-&#39;*5,A.printf) ##Output ##(&amp;lt;__main__.A object at 0x01371070&amp;gt;,) ##----- &amp;lt;bound method A.printf of &amp;lt;__main__.A object at 0x01371070&amp;gt;&amp;gt; ##(&amp;lt;__main__.A object at 0x01371070&amp;gt;,) ##----- &amp;lt;bound method A.</description>
    </item>
    
  </channel>
</rss>