---
import 'unocss-hmr-fix'
import { BlogPost } from '@data/types'
import { formatDate, formatLocalDate } from '@/utils'
import PostLabel from './PostLabel.vue'
import PostDate from './PostDate.vue'
import LQIP from './LQIP.svelte'
import Reactions from './Reactions.astro'

export interface Props {
  post: BlogPost
}

const { post } = Astro.props as Props
---

<main max-w-3xl mx-auto px-2>
  <h1 text-center>{post.title}</h1>

  <div text-center my-1>
    {post.labels.map((label) => <PostLabel label={label} />)}
  </div>

  <div text-center>
    <PostDate createdAt={post.createdAt} lastEditedAt={post.lastEditedAt} />
  </div>

  {post.image && (
    <LQIP
      client:load={import.meta.env.DEV}
      src={post.image.src}
      lazySrc={post.image.lazySrc}
      width={post.image.width}
      height={post.image.height}
      alt="Header"
      w-full
      my-2
    />
  )}
  {post.summary && (
    <div
      class="markdown-body"
      set:html={post.summary}
      bg="gray-100"
      border="2 dashed gray-400 rounded-md"
      px-3
      my-2
    />
  )}

  <article class='article-main markdown-body' set:html={post.body}></article>
  <Reactions reactions={post.reactions} />
  <div flex items-center text-gray-800>
    <div dash-divider></div>
    <div>More comments on</div>
    <a href={`${post.url}#new_comment_field`} text-current>
      <div mx-1 icon-btn i-carbon-logo-github></div>
    </a>
    <div dash-divider></div>
  </div>
  <div>
    {post.comments.map((comment) => (
      <div border="b-2 b-dashed gray-200" px-3 my-2>
        <div flex items-center>
          <img
            src={comment.author?.avatarUrl}
            alt={comment.author?.id}
            title={comment.author?.id}
            width="30"
            rounded-full
            mr-2
          />
          <div text="gray-700 sm" font-bold>
            {comment.author.id}
          </div>
          <div flex-1 />
          <div
            text="gray-700 sm"
            select-none
            title={formatLocalDate(post.lastEditedAt)}
          >
            {formatDate(comment.createdAt)}
          </div>
        </div>

        <div class="comment markdown-body" set:html={comment.body} />
        <Reactions reactions={comment.reactions} />
      </div>
    ))}
  </div>
</main>

<style lang='scss' is:global>
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    @extend headings !optional;
  }

  $font-mono: source-code-pro, Menlo, Monaco, Consolas, Courier New, monospace;

  @mixin full-width($margin) {
    @media (max-width: 500px) {
      margin-left: $margin;
      margin-right: $margin;
      border-radius: 0;

      pre {
        border-radius: 0;
      }
    }
  }

  .markdown-body {
    li,
    p {
      line-height: 1.5;
    }

    blockquote {
      border-left: 0.25em solid #a1abc0;
      padding-left: 1em;
      margin: 1rem;
    }

    a {
      word-break: break-word;
    }

    img {
      background: transparent;
      max-width: 100%;
      &:only-child {
        display: block;
        margin: auto;
      }
    }

    // Code styles
    & :not(pre) > code {
      color: #476582;
      padding: 0.15rem 0.35rem;
      margin: 0;
      background-color: rgba(27, 31, 35, 0.05);
      border-radius: 3px;
    }
    pre {
      overflow: auto;
      line-height: 1.5;
      border-radius: 3px;
      position: relative;
      font-family: $font-mono;
      .code-lang {
        position: absolute;
        top: 0.2em;
        right: 0.6em;
        font-size: 0.75rem;
        color: rgba(255, 255, 255, 0.6);
      }
      code {
        color: #eee8d5;
        padding: 16px;
      }
    }
  }

  .article-main.markdown-body {
    & > pre {
      @include full-width(-1.25rem);
    }
  }
  .comment.markdown-body {
    & > pre {
      @include full-width(-2rem);
    }
  }
  article.article-main.markdown-body {
    headings {
      .anchor-hover {
        color: rgb(55, 102, 245);
        text-decoration: none;
        margin-left: 0.25em;
        opacity: 0; // not hidden to receive hover;
      }
      &:hover .anchor-hover {
        opacity: 1;
      }
    }
  }

  .theme--dark article.article-main.markdown-body {
    :not(pre) > code {
      color: #eee8d5;
      background-color: #282c34;
    }

    pre > code {
      background-color: transparent;
    }

    blockquote {
      color: #bec1c5;
    }

    table tr {
      background-color: transparent;
    }
  }

  .toc-wrapper {
    display: none;

    @media (min-width: 1000px) {
      display: block;
      position: absolute;
      height: 100%;
      left: calc(75vw + 10px);
      width: calc(25vw - 55px);
    }

    .toc {
      position: sticky;
      top: 70px;
    }
  }
</style>
