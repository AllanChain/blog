---
import { BlogPost } from '@data/types'
import { formatDate, formatLocalDate, lang } from '@/utils'
import PostLabel from '@components/PostLabel.astro'
import PostDate from '@components/PostDate.astro'
import LQIP from '@components/LQIP.astro'
import Reactions from '@components/Reactions.astro'

export interface Props {
  post: BlogPost
}

const { post } = Astro.props as Props

const oldPostThreshold = 3 * 365 * 24 * 3600 * 1000
---

<main max-w-4xl mx-auto px-2>
  <h1 text-center lang={lang(post.title)}>{post.title}</h1>

  <div text-center my-1>
    {post.labels.map((label) => <PostLabel label={label} />)}
  </div>

  <div text-center>
    <PostDate createdAt={post.createdAt} lastEditedAt={post.lastEditedAt} />
  </div>

  {
    post.image && (
      <LQIP
        src={post.image.src}
        lazySrc={post.image.lazySrc}
        width={post.image.width}
        height={post.image.height}
        alt={post.imageAlt ? `Header: ${post.imageAlt}` : 'Header'}
        class="w-full my-2"
      />
    )
  }
  {
    new Date().getTime() - post.createdAt.getTime() > oldPostThreshold && (
      <div
        class="markdown-body"
        lang="en"
        bg="teal-500 dark:teal-800"
        border="0 l-10 teal-700 dark:teal-600 solid rounded-md"
        px-3
        flex
        items-center
      >
        <div i-mdi-information-slab-circle-outline w-12 h-12 mr-5 />
        <p>
          This article is a bit old and the content may be outdated, so please refer to
          it with caution and remember to check the latest official materials (such as
          documentation, etc.)
        </p>
      </div>
    )
  }
  {
    post.summary && (
      <div
        class="markdown-body"
        lang={lang(post.summary)}
        set:html={post.summary}
        bg="gray-200 dark:gray-800"
        border="2 dashed gray-400 rounded-md"
        px-3
        my-2
      />
    )
  }

  <article
    class="article-main markdown-body"
    lang={lang(post.body)}
    set:html={post.body}
  />
  <div mt-10 mb-3 h-2em>
    <Reactions reactions={post.reactions} />
  </div>
  <div border="t-2 t-dashed gray-500" mx--5 flex-grow></div>
  <div>
    {
      post.comments.map((comment) => (
        <div border="b-2 b-dashed gray-400 dark:gray-600" px-3 py-1 my-2>
          <div flex items-center>
            <img
              src={comment.author?.avatarUrl}
              alt={comment.author?.id}
              title={comment.author?.id}
              width="30"
              rounded-full
              overflow-hidden
              mr-2
            />
            <div text="gray-700 dark:gray-300 sm" font-bold>
              {comment.author.id}
            </div>
            <div flex-1 />
            <div
              text="gray-700 dark:gray-300 sm"
              select-none
              data-date={comment.createdAt}
              title={formatLocalDate(comment.createdAt)}
            >
              {formatDate(comment.createdAt)}
            </div>
          </div>

          <div
            class="comment markdown-body"
            lang={lang(comment.body)}
            set:html={comment.body}
          />
          <Reactions reactions={comment.reactions} />
        </div>
      ))
    }
    <div text-center text-sm text-gray-700 dark:text-gray-300 mt-2>
      Leave your comments and reactions on
      <a
        class="theme-link"
        href={`${post.url}#new_comment_field`}
        text-black
        dark:text-white
      >
        GitHub
      </a>
    </div>
  </div>
</main>

<style lang="scss" is:global>
  @import '../styles/post.scss';
</style>
