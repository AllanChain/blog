---
import { BlogPost } from '@data/types'
import { formatDate, formatLocalDate, lang } from '@/utils'
import PostLabel from '@components/PostLabel.astro'
import PostDate from '@components/PostDate.astro'
import LQIP from '@components/LQIP.astro'
import Reactions from '@components/Reactions.astro'

export interface Props {
  post: BlogPost
}

const { post } = Astro.props as Props
---

<main max-w-3xl mx-auto px-2>
  <h1 text-center lang={lang(post.title)}>{post.title}</h1>

  <div text-center my-1>
    {post.labels.map((label) => <PostLabel label={label} />)}
  </div>

  <div text-center>
    <PostDate createdAt={post.createdAt} lastEditedAt={post.lastEditedAt} />
  </div>

  {
    post.image && (
      <LQIP
        src={post.image.src}
        lazySrc={post.image.lazySrc}
        width={post.image.width}
        height={post.image.height}
        alt={post.imageAlt ? `Header: ${post.imageAlt}` : 'Header'}
        class="w-full my-2"
      />
    )
  }
  {
    post.summary && (
      <div
        class="markdown-body"
        lang={lang(post.summary)}
        set:html={post.summary}
        bg="gray-200 dark:gray-800"
        border="2 dashed gray-400 rounded-md"
        px-3
        my-2
      />
    )
  }

  <article
    class="article-main markdown-body"
    lang={lang(post.body)}
    set:html={post.body}
  />
  <Reactions reactions={post.reactions} />
  <div dash-divider></div>
  <div>
    {
      post.comments.map((comment) => (
        <div border="b-2 b-dashed gray-200 dark:gray-700" px-3 my-2>
          <div flex items-center>
            <img
              src={comment.author?.avatarUrl}
              alt={comment.author?.id}
              title={comment.author?.id}
              width="30"
              rounded-full
              overflow-hidden
              mr-2
            />
            <div text="gray-700 dark:gray-300 sm" font-bold>
              {comment.author.id}
            </div>
            <div flex-1 />
            <div
              text="gray-700 dark:gray-300 sm"
              select-none
              data-date={comment.createdAt}
              title={formatLocalDate(comment.createdAt)}
            >
              {formatDate(comment.createdAt)}
            </div>
          </div>

          <div
            class="comment markdown-body"
            lang={lang(comment.body)}
            set:html={comment.body}
          />
          <Reactions reactions={comment.reactions} />
        </div>
      ))
    }
    <div text-center text-sm text-gray-700 dark:text-gray-300 mt-2>
      Leave your comments and reactions on
      <a
        class="theme-link"
        href={`${post.url}#new_comment_field`}
        text-black
        dark:text-white
      >
        GitHub
      </a>
    </div>
  </div>
</main>

<style lang="scss" is:global>
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    @extend headings !optional;
  }

  $font-mono: source-code-pro, Menlo, Monaco, Consolas, Courier New, monospace;

  @mixin full-width($margin) {
    @media (max-width: 500px) {
      margin-left: $margin;
      margin-right: $margin;
      border-radius: 0;

      pre {
        border-radius: 0;
      }
    }
  }

  .markdown-body {
    word-wrap: break-word;
    li,
    p {
      line-height: 1.7;
    }

    blockquote {
      border-left: 0.25em solid #a1abc0;
      padding-left: 1em;
      margin: 1rem;
    }

    details {
      background-color: #f9f6f0;
      border-radius: 0.5rem;
      padding: 5px 8px;
    }

    a {
      color: rgb(13, 93, 185);
      text-decoration: none;
      &:hover {
        text-decoration: underline;
      }

      &:visited {
        color: #4f0db9;
      }
    }

    img {
      background: transparent;
      max-width: 100%;
      &:only-child {
        display: block;
        margin: auto;
      }
    }

    table {
      display: block;
      overflow-x: auto;
      border-collapse: collapse;
      td,
      th {
        border: 2px solid #c9d2d9;
        padding: 0.5em 0.75em;
      }
      tr:nth-child(2n) {
        background-color: #f1f3f7;
      }
    }

    kbd {
      font-size: 0.8em;
      background-color: #e6e8ed;
      border: 1px solid #c9d2d9;
      border-radius: 5px;
      padding: 2px 5px;
    }

    hr {
      border-style: dashed;
    }

    // Code styles
    & :not(pre) > code {
      color: #476582;
      padding: 0.15rem 0.35rem;
      margin: 0;
      background-color: rgba(27, 31, 35, 0.05);
      border-radius: 3px;
    }
    pre {
      overflow: auto;
      line-height: 1.6;
      border-radius: 3px;
      position: relative;
      font-family: $font-mono;
      .code-lang {
        position: absolute;
        top: 0.2em;
        right: 0.6em;
        font-size: 0.75rem;
        color: rgba(255, 255, 255, 0.6);
      }
      code {
        color: #eee8d5;
        padding: 16px;
      }
    }
  }

  @media (prefers-color-scheme: dark) {
    .markdown-body {
      :not(pre) > code {
        color: #eee8d5;
        background-color: #282c34;
      }

      blockquote {
        color: #cad0d7;
        border-color: #363c49;
      }
      details {
        background-color: #19202d;
      }
      a {
        color: #539bf5;
        text-decoration: none;
        &:visited {
          color: #ab78fd;
        }
      }

      table {
        td,
        th {
          border: 2px solid #222222;
        }
        tr:nth-child(2n) {
          background-color: #1e2633;
        }
      }

      kbd {
        background-color: #1e2633;
        border: 1px solid #222222;
      }
    }
  }

  .article-main.markdown-body {
    & > pre {
      @include full-width(-1.25rem);
    }
  }
  .comment.markdown-body {
    & > pre {
      @include full-width(-2rem);
    }
  }
  article.article-main.markdown-body {
    headings {
      .anchor-hover {
        text-decoration: none;
        margin-left: 0.25em;
        opacity: 0; // not hidden to receive hover;
      }
      &:hover .anchor-hover {
        opacity: 1;
      }
    }
  }

  .toc-wrapper {
    display: none;

    @media (min-width: 1000px) {
      display: block;
      position: absolute;
      height: 100%;
      left: calc(75vw + 10px);
      width: calc(25vw - 55px);
    }

    .toc {
      position: sticky;
      top: 70px;
    }
  }
</style>
